{
    "sourceFile": "backend/routes/postRoutes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1733195544581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733196351725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,17 @@\n const express = require('express');\n-const { createPost, getAllPosts } = require('../controllers/postController');\n-const { authenticate } = require('../middleware/authMiddleware');\n-const router = \n-::contentReference[oaicite:0]{index=0}\n\\ No newline at end of file\n+const app = express();\n+\n+// Middleware to parse JSON bodies\n+app.use(express.json());\n+\n+// Define the POST route\n+app.post('/api/users/register', (req, res) => {\n+  // Your registration logic here\n+  res.send('User registered successfully');\n+});\n+\n+// Start the server\n+const PORT = process.env.PORT || 8000;\n+app.listen(PORT, () => {\n+  console.log(`Server running on port ${PORT}`);\n+});\n"
                },
                {
                    "date": 1733196890197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,4 +14,11 @@\n const PORT = process.env.PORT || 8000;\n app.listen(PORT, () => {\n   console.log(`Server running on port ${PORT}`);\n });\n+\n+// Error-handling middleware\n+app.use((err, req, res, next) => {\n+    console.error(err.stack);\n+    res.status(500).send('Something broke!');\n+  });\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1733197872961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,11 @@\n const express = require('express');\n-const app = express();\n+const { getAllPosts, createPost } = require('../controllers/postController');\n+const authMiddleware = require('../middleware/auth');\n \n-// Middleware to parse JSON bodies\n-app.use(express.json());\n+const router = express.Router();\n \n-// Define the POST route\n-app.post('/api/users/register', (req, res) => {\n-  // Your registration logic here\n-  res.send('User registered successfully');\n-});\n+// Routes for fetching and creating posts\n+router.get('/', getAllPosts);\n+router.post('/', authMiddleware, createPost);\n \n-// Start the server\n-const PORT = process.env.PORT || 8000;\n-app.listen(PORT, () => {\n-  console.log(`Server running on port ${PORT}`);\n-});\n-\n\\ No newline at end of file\n-// Error-handling middleware\n-app.use((err, req, res, next) => {\n-    console.error(err.stack);\n-    res.status(500).send('Something broke!');\n-  });\n-  \n+module.exports = router;\n"
                },
                {
                    "date": 1733206415357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,67 @@\n const express = require('express');\n-const { getAllPosts, createPost } = require('../controllers/postController');\n-const authMiddleware = require('../middleware/auth');\n-\n+const { createPost, getAllPosts } = require('../controllers/postController');\n+const authMiddleware = require('../middleware/auth'); // Middleware for authentication\n const router = express.Router();\n \n-// Routes for fetching and creating posts\n-router.get('/', getAllPosts);\n-router.post('/', authMiddleware, createPost);\n+// Existing routes\n+router.post('/', authMiddleware, createPost); // Create a post\n+router.get('/', getAllPosts);                // Get all posts\n \n+// New routes\n+// Edit a post\n+router.put('/:id', authMiddleware, async (req, res) => {\n+  try {\n+    const { id } = req.params;\n+    const { content } = req.body;\n+    const userId = req.user.id; // Extracted from the auth middleware\n+\n+    // Find the post by ID\n+    const post = await Post.findById(id);\n+    if (!post) {\n+      return res.status(404).json({ error: 'Post not found' });\n+    }\n+\n+    // Check if the logged-in user owns the post\n+    if (post.user.toString() !== userId) {\n+      return res.status(403).json({ error: 'You are not authorized to edit this post' });\n+    }\n+\n+    // Update the post content\n+    post.content = content;\n+    await post.save();\n+\n+    res.json({ message: 'Post updated successfully', post });\n+  } catch (error) {\n+    console.error('Error editing post:', error.message);\n+    res.status(500).json({ error: 'An error occurred while editing the post' });\n+  }\n+});\n+\n+// Delete a post\n+router.delete('/:id', authMiddleware, async (req, res) => {\n+  try {\n+    const { id } = req.params;\n+    const userId = req.user.id; // Extracted from the auth middleware\n+\n+    // Find the post by ID\n+    const post = await Post.findById(id);\n+    if (!post) {\n+      return res.status(404).json({ error: 'Post not found' });\n+    }\n+\n+    // Check if the logged-in user owns the post\n+    if (post.user.toString() !== userId) {\n+      return res.status(403).json({ error: 'You are not authorized to delete this post' });\n+    }\n+\n+    // Delete the post\n+    await post.remove();\n+\n+    res.json({ message: 'Post deleted successfully' });\n+  } catch (error) {\n+    console.error('Error deleting post:', error.message);\n+    res.status(500).json({ error: 'An error occurred while deleting the post' });\n+  }\n+});\n+\n module.exports = router;\n"
                },
                {
                    "date": 1733206665407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,67 +1,13 @@\n const express = require('express');\n-const { createPost, getAllPosts } = require('../controllers/postController');\n-const authMiddleware = require('../middleware/auth'); // Middleware for authentication\n+const { getAllPosts, createPost, editPost, deletePost } = require('../controllers/postController');\n+const authMiddleware = require('../middleware/auth');\n+\n const router = express.Router();\n \n-// Existing routes\n-router.post('/', authMiddleware, createPost); // Create a post\n-router.get('/', getAllPosts);                // Get all posts\n+// Routes for fetching and creating posts\n+router.get('/', getAllPosts);\n+router.post('/', authMiddleware, createPost);\n+router.put('/:id', authMiddleware, editPost); // Edit post\n+router.delete('/:id', authMiddleware, deletePost); // Delete post\n \n-// New routes\n-// Edit a post\n-router.put('/:id', authMiddleware, async (req, res) => {\n-  try {\n-    const { id } = req.params;\n-    const { content } = req.body;\n-    const userId = req.user.id; // Extracted from the auth middleware\n-\n-    // Find the post by ID\n-    const post = await Post.findById(id);\n-    if (!post) {\n-      return res.status(404).json({ error: 'Post not found' });\n-    }\n-\n-    // Check if the logged-in user owns the post\n-    if (post.user.toString() !== userId) {\n-      return res.status(403).json({ error: 'You are not authorized to edit this post' });\n-    }\n-\n-    // Update the post content\n-    post.content = content;\n-    await post.save();\n-\n-    res.json({ message: 'Post updated successfully', post });\n-  } catch (error) {\n-    console.error('Error editing post:', error.message);\n-    res.status(500).json({ error: 'An error occurred while editing the post' });\n-  }\n-});\n-\n-// Delete a post\n-router.delete('/:id', authMiddleware, async (req, res) => {\n-  try {\n-    const { id } = req.params;\n-    const userId = req.user.id; // Extracted from the auth middleware\n-\n-    // Find the post by ID\n-    const post = await Post.findById(id);\n-    if (!post) {\n-      return res.status(404).json({ error: 'Post not found' });\n-    }\n-\n-    // Check if the logged-in user owns the post\n-    if (post.user.toString() !== userId) {\n-      return res.status(403).json({ error: 'You are not authorized to delete this post' });\n-    }\n-\n-    // Delete the post\n-    await post.remove();\n-\n-    res.json({ message: 'Post deleted successfully' });\n-  } catch (error) {\n-    console.error('Error deleting post:', error.message);\n-    res.status(500).json({ error: 'An error occurred while deleting the post' });\n-  }\n-});\n-\n module.exports = router;\n"
                },
                {
                    "date": 1733208705619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n const express = require('express');\n+const authMiddleware = require('../middleware/auth');\n const { getAllPosts, createPost, editPost, deletePost } = require('../controllers/postController');\n-const authMiddleware = require('../middleware/auth');\n \n const router = express.Router();\n \n-// Routes for fetching and creating posts\n-router.get('/', getAllPosts);\n-router.post('/', authMiddleware, createPost);\n-router.put('/:id', authMiddleware, editPost); // Edit post\n-router.delete('/:id', authMiddleware, deletePost); // Delete post\n+router.get('/', getAllPosts); // Fetch all posts\n+router.post('/', authMiddleware, createPost); // Create a post\n+router.put('/:id', authMiddleware, editPost); // Edit a post\n+router.delete('/:id', authMiddleware, deletePost); // Delete a post\n \n module.exports = router;\n"
                }
            ],
            "date": 1733195544581,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst { createPost, getAllPosts } = require('../controllers/postController');\nconst { authenticate } = require('../middleware/authMiddleware');\nconst router = \n::contentReference[oaicite:0]{index=0}"
        }
    ]
}