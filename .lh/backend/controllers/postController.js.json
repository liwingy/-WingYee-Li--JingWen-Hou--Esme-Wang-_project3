{
    "sourceFile": "backend/controllers/postController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1733196338417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733197788803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,23 @@\n const Post = require('../models/Post');\n \n-/**\n- * Create a new post.\n- * @param {Object} req - Express request object containing post details in req.body.\n- * @param {Object} res - Express response object.\n- */\n-exports.createPost = async (req, res) => {\n-  const { title, content } = req.body;\n+// Fetch all posts, sorted by newest first\n+exports.getAllPosts = async (req, res) => {\n   try {\n-    // Create a new post instance with the provided details and the authenticated user's ID\n-    const newPost = new Post({ title, content, author: req.user.id });\n-    // Save the post to the database\n-    await newPost.save();\n-    res.status(201).json(newPost);\n-  } catch (error) {\n-    // Handle errors during post creation\n-    res.status(400).json({ error: error.message });\n+    const posts = await Post.find().populate('user', 'username').sort({ timestamp: -1 });\n+    res.json(posts);\n+  } catch (err) {\n+    res.status(500).json({ error: 'Failed to fetch posts' });\n   }\n };\n \n-/**\n- * Retrieve all posts.\n- * @param {Object} req - Express request object.\n- * @param {Object} res - Express response object.\n- */\n-exports.getAllPosts = async (req, res) => {\n+// Create a new post\n+exports.createPost = async (req, res) => {\n   try {\n-    // Find all posts and populate the author field with the username\n-    const posts = await Post.find().populate('author', 'username');\n-    res.json(posts);\n-  } catch (error) {\n-    // Handle errors during retrieval\n-    res.status(500).json({ error: error.message });\n+    const { content } = req.body;\n+    const post = new Post({ user: req.user.id, content }); // Associate post with logged-in user\n+    await post.save(); // Save post to the database\n+    res.status(201).json({ message: 'Post created successfully' });\n+  } catch (err) {\n+    res.status(500).json({ error: 'Failed to create post' });\n   }\n };\n"
                },
                {
                    "date": 1733206611057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,4 +20,55 @@\n   } catch (err) {\n     res.status(500).json({ error: 'Failed to create post' });\n   }\n };\n+\n+// Edit a post\n+exports.editPost = async (req, res) => {\n+  try {\n+    const { id } = req.params;\n+    const { content } = req.body;\n+    const userId = req.user.id;\n+\n+    const post = await Post.findById(id);\n+    if (!post) {\n+      return res.status(404).json({ error: 'Post not found' });\n+    }\n+\n+    if (post.user.toString() !== userId) {\n+      return res.status(403).json({ error: 'You are not authorized to edit this post' });\n+    }\n+\n+    post.content = content;\n+    await post.save();\n+\n+    res.json({ message: 'Post updated successfully', post });\n+  } catch (error) {\n+    console.error('Error editing post:', error.message);\n+    res.status(500).json({ error: 'An error occurred while editing the post' });\n+  }\n+};\n+\n+\n+// Delete a post\n+exports.deletePost = async (req, res) => {\n+  try {\n+    const { id } = req.params;\n+    const userId = req.user.id;\n+\n+    const post = await Post.findById(id);\n+    if (!post) {\n+      return res.status(404).json({ error: 'Post not found' });\n+    }\n+\n+    if (post.user.toString() !== userId) {\n+      return res.status(403).json({ error: 'You are not authorized to delete this post' });\n+    }\n+\n+    await post.remove();\n+\n+    res.json({ message: 'Post deleted successfully' });\n+  } catch (error) {\n+    console.error('Error deleting post:', error.message);\n+    res.status(500).json({ error: 'An error occurred while deleting the post' });\n+  }\n+};\n"
                },
                {
                    "date": 1733207233270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   try {\n     const { content } = req.body;\n     const post = new Post({ user: req.user.id, content }); // Associate post with logged-in user\n     await post.save(); // Save post to the database\n-    res.status(201).json({ message: 'Post created successfully' });\n+    res.status(201).json({ _id: \"123\", message: 'Post created successfully' });\n   } catch (err) {\n     res.status(500).json({ error: 'Failed to create post' });\n   }\n };\n@@ -47,9 +47,8 @@\n     res.status(500).json({ error: 'An error occurred while editing the post' });\n   }\n };\n \n-\n // Delete a post\n exports.deletePost = async (req, res) => {\n   try {\n     const { id } = req.params;\n"
                },
                {
                    "date": 1733208787488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   try {\n     const { content } = req.body;\n     const post = new Post({ user: req.user.id, content }); // Associate post with logged-in user\n     await post.save(); // Save post to the database\n-    res.status(201).json({ _id: \"123\", message: 'Post created successfully' });\n+    res.status(201).json({ message: 'Post created successfully' });\n   } catch (err) {\n     res.status(500).json({ error: 'Failed to create post' });\n   }\n };\n"
                },
                {
                    "date": 1733208997772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,47 +2,84 @@\n \n // Fetch all posts, sorted by newest first\n exports.getAllPosts = async (req, res) => {\n   try {\n-    const posts = await Post.find().populate('user', 'username').sort({ timestamp: -1 });\n+    const posts = await Post.find()\n+      .populate('user', 'username') // Populate 'user' field with username\n+      .sort({ timestamp: -1 }); // Sort posts by descending timestamp\n+\n+    if (posts.length === 0) {\n+      return res.status(404).json({ message: 'No posts available' });\n+    }\n+\n     res.json(posts);\n-  } catch (err) {\n-    res.status(500).json({ error: 'Failed to fetch posts' });\n+  } catch (error) {\n+    console.error('Error fetching posts:', error.message);\n+    res.status(500).json({ error: 'An error occurred while fetching posts' });\n   }\n };\n \n // Create a new post\n exports.createPost = async (req, res) => {\n   try {\n     const { content } = req.body;\n-    const post = new Post({ user: req.user.id, content }); // Associate post with logged-in user\n-    await post.save(); // Save post to the database\n-    res.status(201).json({ message: 'Post created successfully' });\n-  } catch (err) {\n-    res.status(500).json({ error: 'Failed to create post' });\n+\n+    // Validate input\n+    if (!content) {\n+      return res.status(400).json({ error: 'Content is required' });\n+    }\n+\n+    // Create the post\n+    const post = new Post({\n+      user: req.user.id, // Associate post with logged-in user\n+      content,\n+      timestamp: new Date(), // Add the current timestamp\n+    });\n+\n+    // Save the post to the database\n+    await post.save();\n+\n+    res.status(201).json({\n+      message: 'Post created successfully',\n+      post,\n+    });\n+  } catch (error) {\n+    console.error('Error creating post:', error.message);\n+    res.status(500).json({ error: 'An error occurred while creating the post' });\n   }\n };\n \n // Edit a post\n exports.editPost = async (req, res) => {\n   try {\n     const { id } = req.params;\n     const { content } = req.body;\n-    const userId = req.user.id;\n+    const userId = req.user.id; // Extract user ID from the auth middleware\n \n+    // Validate input\n+    if (!content) {\n+      return res.status(400).json({ error: 'Content is required' });\n+    }\n+\n+    // Find the post by ID\n     const post = await Post.findById(id);\n     if (!post) {\n       return res.status(404).json({ error: 'Post not found' });\n     }\n \n+    // Check if the logged-in user owns the post\n     if (post.user.toString() !== userId) {\n       return res.status(403).json({ error: 'You are not authorized to edit this post' });\n     }\n \n+    // Update the post content\n     post.content = content;\n     await post.save();\n \n-    res.json({ message: 'Post updated successfully', post });\n+    res.json({\n+      message: 'Post updated successfully',\n+      post,\n+    });\n   } catch (error) {\n     console.error('Error editing post:', error.message);\n     res.status(500).json({ error: 'An error occurred while editing the post' });\n   }\n@@ -51,19 +88,22 @@\n // Delete a post\n exports.deletePost = async (req, res) => {\n   try {\n     const { id } = req.params;\n-    const userId = req.user.id;\n+    const userId = req.user.id; // Extract user ID from the auth middleware\n \n+    // Find the post by ID\n     const post = await Post.findById(id);\n     if (!post) {\n       return res.status(404).json({ error: 'Post not found' });\n     }\n \n+    // Check if the logged-in user owns the post\n     if (post.user.toString() !== userId) {\n       return res.status(403).json({ error: 'You are not authorized to delete this post' });\n     }\n \n+    // Delete the post\n     await post.remove();\n \n     res.json({ message: 'Post deleted successfully' });\n   } catch (error) {\n"
                },
                {
                    "date": 1733542855240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,23 +88,23 @@\n // Delete a post\n exports.deletePost = async (req, res) => {\n   try {\n     const { id } = req.params;\n-    const userId = req.user.id; // Extract user ID from the auth middleware\n+    const userId = req.user.id;\n \n     // Find the post by ID\n     const post = await Post.findById(id);\n     if (!post) {\n       return res.status(404).json({ error: 'Post not found' });\n     }\n \n-    // Check if the logged-in user owns the post\n+    // Check if the logged-in user is the owner of the post\n     if (post.user.toString() !== userId) {\n       return res.status(403).json({ error: 'You are not authorized to delete this post' });\n     }\n \n     // Delete the post\n-    await post.remove();\n+    await post.deleteOne();\n \n     res.json({ message: 'Post deleted successfully' });\n   } catch (error) {\n     console.error('Error deleting post:', error.message);\n"
                },
                {
                    "date": 1733543340385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,7 @@\n     await post.deleteOne();\n \n     res.json({ message: 'Post deleted successfully' });\n   } catch (error) {\n-    console.error('Error deleting post:', error.message);\n     res.status(500).json({ error: 'An error occurred while deleting the post' });\n   }\n };\n"
                }
            ],
            "date": 1733196338417,
            "name": "Commit-0",
            "content": "const Post = require('../models/Post');\n\n/**\n * Create a new post.\n * @param {Object} req - Express request object containing post details in req.body.\n * @param {Object} res - Express response object.\n */\nexports.createPost = async (req, res) => {\n  const { title, content } = req.body;\n  try {\n    // Create a new post instance with the provided details and the authenticated user's ID\n    const newPost = new Post({ title, content, author: req.user.id });\n    // Save the post to the database\n    await newPost.save();\n    res.status(201).json(newPost);\n  } catch (error) {\n    // Handle errors during post creation\n    res.status(400).json({ error: error.message });\n  }\n};\n\n/**\n * Retrieve all posts.\n * @param {Object} req - Express request object.\n * @param {Object} res - Express response object.\n */\nexports.getAllPosts = async (req, res) => {\n  try {\n    // Find all posts and populate the author field with the username\n    const posts = await Post.find().populate('author', 'username');\n    res.json(posts);\n  } catch (error) {\n    // Handle errors during retrieval\n    res.status(500).json({ error: error.message });\n  }\n};\n"
        }
    ]
}