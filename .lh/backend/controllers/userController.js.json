{
    "sourceFile": "backend/controllers/userController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1733196338412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733198397888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+const User = require('../models/User');\n+const jwt = require('jsonwebtoken');\n+const bcrypt = require('bcrypt');\n+\n+// Register a new user\n+exports.register = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+    const user = new User({ username, password });\n+    await user.save();\n+    res.status(201).json({ message: 'User registered successfully' });\n+  } catch (err) {\n+    res.status(500).json({ error: 'Registration failed' });\n+  }\n+};\n+\n+// Log in a user\n+exports.login = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+    const user = await User.findOne({ username });\n+    if (!user) return res.status(404).json({ error: 'User not found' });\n+\n+    const isMatch = await bcrypt.compare(password, user.password);\n+    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\n+\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+    res.cookie('token', token, { httpOnly: true }).json({ message: 'Login successful' });\n+  } catch (err) {\n+    res.status(500).json({ error: 'Login failed' });\n+  }\n+};\n"
                },
                {
                    "date": 1733198461215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,53 +29,4 @@\n   } catch (err) {\n     res.status(500).json({ error: 'Login failed' });\n   }\n };\n-const User = require('../models/User');\n-const bcrypt = require('bcrypt');\n-const jwt = require('jsonwebtoken');\n-\n-/**\n- * Register a new user.\n- * @param {Object} req - Express request object containing user details in req.body.\n- * @param {Object} res - Express response object.\n- */\n-exports.registerUser = async (req, res) => {\n-  const { username, email, password } = req.body;\n-  try {\n-    // Hash the user's password before saving to the database\n-    const hashedPassword = await bcrypt.hash(password, 10);\n-    // Create a new user instance with the provided details\n-    const newUser = new User({ username, email, password: hashedPassword });\n-    // Save the user to the database\n-    await newUser.save();\n-    res.status(201).json({ message: 'User registered successfully' });\n-  } catch (error) {\n-    // Handle errors, such as duplicate entries or validation issues\n-    res.status(400).json({ error: error.message });\n-  }\n-};\n-\n-/**\n- * Authenticate a user and return a JWT token.\n- * @param {Object} req - Express request object containing login details in req.body.\n- * @param {Object} res - Express response object.\n- */\n-exports.loginUser = async (req, res) => {\n-  const { email, password } = req.body;\n-  try {\n-    // Find the user by email\n-    const user = await User.findOne({ email });\n-    if (!user) return res.status(404).json({ error: 'User not found' });\n-\n-    // Compare the provided password with the hashed password in the database\n-    const isMatch = await bcrypt.compare(password, user.password);\n-    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\n-\n-    // Generate a JWT token valid for 1 hour\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\n-    res.json({ token });\n-  } catch (error) {\n-    // Handle errors during authentication\n-    res.status(500).json({ error: error.message });\n-  }\n-};\n"
                },
                {
                    "date": 1733203835882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,139 @@\n const User = require('../models/User');\n+const Post = require('../models/Post'); // Import Post model for user details\n const jwt = require('jsonwebtoken');\n const bcrypt = require('bcrypt');\n \n // Register a new user\n exports.register = async (req, res) => {\n   try {\n     const { username, password } = req.body;\n-    const user = new User({ username, password });\n+\n+    // Validate input\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    // Check if the username already exists\n+    const existingUser = await User.findOne({ username });\n+    if (existingUser) {\n+      return res.status(409).json({ error: 'Username already exists' });\n+    }\n+\n+    // Hash the password\n+    const hashedPassword = await bcrypt.hash(password, 10);\n+\n+    // Create and save the user\n+    const user = new User({ username, password: hashedPassword });\n     await user.save();\n+\n     res.status(201).json({ message: 'User registered successfully' });\n-  } catch (err) {\n-    res.status(500).json({ error: 'Registration failed' });\n+  } catch (error) {\n+    console.error('Error during registration:', error.message);\n+    res.status(500).json({ error: 'An error occurred while registering the user' });\n   }\n };\n \n // Log in a user\n exports.login = async (req, res) => {\n   try {\n     const { username, password } = req.body;\n+\n+    // Validate input\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    // Find the user by username\n     const user = await User.findOne({ username });\n-    if (!user) return res.status(404).json({ error: 'User not found' });\n+    if (!user) {\n+      return res.status(404).json({ error: 'Invalid username or password' });\n+    }\n \n+    // Verify the password\n     const isMatch = await bcrypt.compare(password, user.password);\n-    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\n+    if (!isMatch) {\n+      return res.status(401).json({ error: 'Invalid username or password' });\n+    }\n \n+    // Generate a JWT token\n     const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-    res.cookie('token', token, { httpOnly: true }).json({ message: 'Login successful' });\n-  } catch (err) {\n-    res.status(500).json({ error: 'Login failed' });\n+\n+    // Set the token as an HTTP-only cookie\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(200)\n+       .json({ message: 'Login successful' });\n+  } catch (error) {\n+    console.error('Error during login:', error.message);\n+    res.status(500).json({ error: 'An error occurred while logging in' });\n   }\n };\n+\n+// Search for users by username\n+exports.searchUsers = async (req, res) => {\n+  try {\n+    const query = req.query.q;\n+\n+    // Validate input\n+    if (!query) {\n+      return res.status(400).json({ error: 'Search query is required' });\n+    }\n+\n+    // Perform a case-insensitive, partial search on usernames\n+    const users = await User.find({\n+      username: { $regex: query, $options: 'i' },\n+    }).select('username createdAt'); // Return only username and createdAt fields\n+\n+    if (users.length === 0) {\n+      return res.status(404).json({ message: 'No users found' });\n+    }\n+\n+    res.json(users);\n+  } catch (error) {\n+    console.error('Error searching users:', error.message);\n+    res.status(500).json({ error: 'An error occurred while searching users' });\n+  }\n+};\n+\n+// Update user profile description\n+exports.updateDescription = async (req, res) => {\n+  try {\n+    const { description } = req.body;\n+    const userId = req.user.id; // User ID is extracted from auth middleware\n+\n+    // Find the user by ID\n+    const user = await User.findById(userId);\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    // Update the description\n+    user.description = description;\n+    await user.save();\n+\n+    res.json({ message: 'Description updated successfully', description: user.description });\n+  } catch (error) {\n+    console.error('Error updating description:', error.message);\n+    res.status(500).json({ error: 'An error occurred while updating the description' });\n+  }\n+};\n+\n+// Get user details and posts\n+exports.getUserDetails = async (req, res) => {\n+  try {\n+    const userId = req.params.id;\n+\n+    // Find the user by ID\n+    const user = await User.findById(userId).select('username createdAt description');\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    // Find the posts made by the user\n+    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n+\n+    res.json({ user, posts });\n+  } catch (error) {\n+    console.error('Error fetching user details:', error.message);\n+    res.status(500).json({ error: 'An error occurred while fetching user details' });\n+  }\n+};\n"
                },
                {
                    "date": 1733203849081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n const User = require('../models/User');\n-const Post = require('../models/Post'); // Import Post model for user details\n+const Post = require('../models/Post'); \n const jwt = require('jsonwebtoken');\n const bcrypt = require('bcrypt');\n \n // Register a new user\n"
                },
                {
                    "date": 1733206311653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const Post = require('../models/Post'); \n const jwt = require('jsonwebtoken');\n const bcrypt = require('bcrypt');\n \n-// Register a new user\n+// Register a new user and log them in\n exports.register = async (req, res) => {\n   try {\n     const { username, password } = req.body;\n \n@@ -25,9 +25,15 @@\n     // Create and save the user\n     const user = new User({ username, password: hashedPassword });\n     await user.save();\n \n-    res.status(201).json({ message: 'User registered successfully' });\n+    // Generate a JWT token\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+\n+    // Set the token as an HTTP-only cookie\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(201)\n+       .json({ message: 'User registered and logged in successfully' });\n   } catch (error) {\n     console.error('Error during registration:', error.message);\n     res.status(500).json({ error: 'An error occurred while registering the user' });\n   }\n"
                },
                {
                    "date": 1733209636885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,41 +40,42 @@\n };\n \n // Log in a user\n exports.login = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    // Validate input\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n+  exports.login = async (req, res) => {\n+    try {\n+      const { username, password } = req.body;\n+  \n+      // Validate input\n+      if (!username || !password) {\n+        return res.status(400).json({ error: 'Username and password are required' });\n+      }\n+  \n+      // Find the user by username\n+      const user = await User.findOne({ username });\n+      if (!user) {\n+        return res.status(404).json({ error: 'Invalid username or password' });\n+      }\n+  \n+      // Verify the password\n+      const isMatch = await bcrypt.compare(password, user.password);\n+      if (!isMatch) {\n+        return res.status(401).json({ error: 'Invalid username or password' });\n+      }\n+  \n+      // Generate a JWT token\n+      const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+  \n+      // Set the token as an HTTP-only cookie\n+      res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+         .status(200)\n+         .json({ message: 'Login successful' });\n+    } catch (error) {\n+      console.error('Error during login:', error.message);\n+      res.status(500).json({ error: 'An error occurred while logging in' });\n     }\n+  };\n \n-    // Find the user by username\n-    const user = await User.findOne({ username });\n-    if (!user) {\n-      return res.status(404).json({ error: 'Invalid username or password' });\n-    }\n-\n-    // Verify the password\n-    const isMatch = await bcrypt.compare(password, user.password);\n-    if (!isMatch) {\n-      return res.status(401).json({ error: 'Invalid username or password' });\n-    }\n-\n-    // Generate a JWT token\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-\n-    // Set the token as an HTTP-only cookie\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(200)\n-       .json({ message: 'Login successful' });\n-  } catch (error) {\n-    console.error('Error during login:', error.message);\n-    res.status(500).json({ error: 'An error occurred while logging in' });\n-  }\n-};\n-\n // Search for users by username\n exports.searchUsers = async (req, res) => {\n   try {\n     const query = req.query.q;\n"
                },
                {
                    "date": 1733209666054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,42 +40,41 @@\n };\n \n // Log in a user\n exports.login = async (req, res) => {\n-  exports.login = async (req, res) => {\n-    try {\n-      const { username, password } = req.body;\n-  \n-      // Validate input\n-      if (!username || !password) {\n-        return res.status(400).json({ error: 'Username and password are required' });\n-      }\n-  \n-      // Find the user by username\n-      const user = await User.findOne({ username });\n-      if (!user) {\n-        return res.status(404).json({ error: 'Invalid username or password' });\n-      }\n-  \n-      // Verify the password\n-      const isMatch = await bcrypt.compare(password, user.password);\n-      if (!isMatch) {\n-        return res.status(401).json({ error: 'Invalid username or password' });\n-      }\n-  \n-      // Generate a JWT token\n-      const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-  \n-      // Set the token as an HTTP-only cookie\n-      res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-         .status(200)\n-         .json({ message: 'Login successful' });\n-    } catch (error) {\n-      console.error('Error during login:', error.message);\n-      res.status(500).json({ error: 'An error occurred while logging in' });\n+  try {\n+    const { username, password } = req.body;\n+\n+    // Validate input\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n     }\n-  };\n \n+    // Find the user by username\n+    const user = await User.findOne({ username });\n+    if (!user) {\n+      return res.status(404).json({ error: 'Invalid username or password' });\n+    }\n+\n+    // Verify the password\n+    const isMatch = await bcrypt.compare(password, user.password);\n+    if (!isMatch) {\n+      return res.status(401).json({ error: 'Invalid username or password' });\n+    }\n+\n+    // Generate a JWT token\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+\n+    // Set the token as an HTTP-only cookie\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(200)\n+       .json({ message: 'Login successful' });\n+  } catch (error) {\n+    console.error('Error during login:', error.message);\n+    res.status(500).json({ error: 'An error occurred while logging in' });\n+  }\n+};\n+\n // Search for users by username\n exports.searchUsers = async (req, res) => {\n   try {\n     const query = req.query.q;\n"
                },
                {
                    "date": 1733539142994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,29 +43,24 @@\n exports.login = async (req, res) => {\n   try {\n     const { username, password } = req.body;\n \n-    // Validate input\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n-    }\n+    console.log('Request Body:', req.body); // Debug input\n+    const user = await User.findOne({ username });\n+    console.log('Found User:', user); // Debug user from DB\n \n-    // Find the user by username\n-    const user = await User.findOne({ username });\n     if (!user) {\n       return res.status(404).json({ error: 'Invalid username or password' });\n     }\n \n-    // Verify the password\n     const isMatch = await bcrypt.compare(password, user.password);\n+    console.log('Password Match:', isMatch); // Debug password comparison\n+\n     if (!isMatch) {\n       return res.status(401).json({ error: 'Invalid username or password' });\n     }\n \n-    // Generate a JWT token\n     const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-\n-    // Set the token as an HTTP-only cookie\n     res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n        .status(200)\n        .json({ message: 'Login successful' });\n   } catch (error) {\n@@ -73,8 +68,9 @@\n     res.status(500).json({ error: 'An error occurred while logging in' });\n   }\n };\n \n+\n // Search for users by username\n exports.searchUsers = async (req, res) => {\n   try {\n     const query = req.query.q;\n"
                },
                {
                    "date": 1733539372497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,15 +18,13 @@\n     if (existingUser) {\n       return res.status(409).json({ error: 'Username already exists' });\n     }\n \n-    // Hash the password\n-    const hashedPassword = await bcrypt.hash(password, 10);\n-\n-    // Create and save the user\n-    const user = new User({ username, password: hashedPassword });\n+    const hashedPassword = await bcrypt.hash(password, 10); // Hash the password\n+    const user = new User({ username, password: hashedPassword }); // Save hashed password\n     await user.save();\n \n+\n     // Generate a JWT token\n     const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n \n     // Set the token as an HTTP-only cookie\n"
                },
                {
                    "date": 1733539404250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,141 @@\n+const User = require('../models/User');\n+const Post = require('../models/Post'); \n+const jwt = require('jsonwebtoken');\n+const bcrypt = require('bcrypt');\n+\n+// Register a new user and log them in\n+exports.register = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    // Validate input\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    // Check if the username already exists\n+    const existingUser = await User.findOne({ username });\n+    if (existingUser) {\n+      return res.status(409).json({ error: 'Username already exists' });\n+    }\n+\n+    // Hash the password\n+    const hashedPassword = await bcrypt.hash(password, 10);\n+\n+    // Create and save the user\n+    const user = new User({ username, password: hashedPassword });\n+    await user.save();\n+\n+    // Generate a JWT token\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+\n+    // Set the token as an HTTP-only cookie\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(201)\n+       .json({ message: 'User registered and logged in successfully' });\n+  } catch (error) {\n+    console.error('Error during registration:', error.message);\n+    res.status(500).json({ error: 'An error occurred while registering the user' });\n+  }\n+};\n+\n+// Log in a user\n+exports.login = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    console.log('Request Body:', req.body); // Debug input\n+    const user = await User.findOne({ username });\n+    console.log('Found User:', user); // Debug user from DB\n+\n+    if (!user) {\n+      return res.status(404).json({ error: 'Invalid username or password' });\n+    }\n+\n+    const isMatch = await bcrypt.compare(password, user.password);\n+    console.log('Password Match:', isMatch); // Debug password comparison\n+\n+    if (!isMatch) {\n+      return res.status(401).json({ error: 'Invalid username or password' });\n+    }\n+\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(200)\n+       .json({ message: 'Login successful' });\n+  } catch (error) {\n+    console.error('Error during login:', error.message);\n+    res.status(500).json({ error: 'An error occurred while logging in' });\n+  }\n+};\n+\n+\n+// Search for users by username\n+exports.searchUsers = async (req, res) => {\n+  try {\n+    const query = req.query.q;\n+\n+    // Validate input\n+    if (!query) {\n+      return res.status(400).json({ error: 'Search query is required' });\n+    }\n+\n+    // Perform a case-insensitive, partial search on usernames\n+    const users = await User.find({\n+      username: { $regex: query, $options: 'i' },\n+    }).select('username createdAt'); // Return only username and createdAt fields\n+\n+    if (users.length === 0) {\n+      return res.status(404).json({ message: 'No users found' });\n+    }\n+\n+    res.json(users);\n+  } catch (error) {\n+    console.error('Error searching users:', error.message);\n+    res.status(500).json({ error: 'An error occurred while searching users' });\n+  }\n+};\n+\n+// Update user profile description\n+exports.updateDescription = async (req, res) => {\n+  try {\n+    const { description } = req.body;\n+    const userId = req.user.id; // User ID is extracted from auth middleware\n+\n+    // Find the user by ID\n+    const user = await User.findById(userId);\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    // Update the description\n+    user.description = description;\n+    await user.save();\n+\n+    res.json({ message: 'Description updated successfully', description: user.description });\n+  } catch (error) {\n+    console.error('Error updating description:', error.message);\n+    res.status(500).json({ error: 'An error occurred while updating the description' });\n+  }\n+};\n+\n+// Get user details and posts\n+exports.getUserDetails = async (req, res) => {\n+  try {\n+    const userId = req.params.id;\n+\n+    // Find the user by ID\n+    const user = await User.findById(userId).select('username createdAt description');\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    // Find the posts made by the user\n+    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n+\n+    res.json({ user, posts });\n+  } catch (error) {\n+    console.error('Error fetching user details:', error.message);\n+    res.status(500).json({ error: 'An error occurred while fetching user details' });\n+  }\n+};\n"
                },
                {
                    "date": 1733539419993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,143 +138,4 @@\n     console.error('Error fetching user details:', error.message);\n     res.status(500).json({ error: 'An error occurred while fetching user details' });\n   }\n };\n-const User = require('../models/User');\n-const Post = require('../models/Post'); \n-const jwt = require('jsonwebtoken');\n-const bcrypt = require('bcrypt');\n-\n-// Register a new user and log them in\n-exports.register = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    // Validate input\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n-    }\n-\n-    // Check if the username already exists\n-    const existingUser = await User.findOne({ username });\n-    if (existingUser) {\n-      return res.status(409).json({ error: 'Username already exists' });\n-    }\n-\n-    const hashedPassword = await bcrypt.hash(password, 10); // Hash the password\n-    const user = new User({ username, password: hashedPassword }); // Save hashed password\n-    await user.save();\n-\n-\n-    // Generate a JWT token\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-\n-    // Set the token as an HTTP-only cookie\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(201)\n-       .json({ message: 'User registered and logged in successfully' });\n-  } catch (error) {\n-    console.error('Error during registration:', error.message);\n-    res.status(500).json({ error: 'An error occurred while registering the user' });\n-  }\n-};\n-\n-// Log in a user\n-exports.login = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    console.log('Request Body:', req.body); // Debug input\n-    const user = await User.findOne({ username });\n-    console.log('Found User:', user); // Debug user from DB\n-\n-    if (!user) {\n-      return res.status(404).json({ error: 'Invalid username or password' });\n-    }\n-\n-    const isMatch = await bcrypt.compare(password, user.password);\n-    console.log('Password Match:', isMatch); // Debug password comparison\n-\n-    if (!isMatch) {\n-      return res.status(401).json({ error: 'Invalid username or password' });\n-    }\n-\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(200)\n-       .json({ message: 'Login successful' });\n-  } catch (error) {\n-    console.error('Error during login:', error.message);\n-    res.status(500).json({ error: 'An error occurred while logging in' });\n-  }\n-};\n-\n-\n-// Search for users by username\n-exports.searchUsers = async (req, res) => {\n-  try {\n-    const query = req.query.q;\n-\n-    // Validate input\n-    if (!query) {\n-      return res.status(400).json({ error: 'Search query is required' });\n-    }\n-\n-    // Perform a case-insensitive, partial search on usernames\n-    const users = await User.find({\n-      username: { $regex: query, $options: 'i' },\n-    }).select('username createdAt'); // Return only username and createdAt fields\n-\n-    if (users.length === 0) {\n-      return res.status(404).json({ message: 'No users found' });\n-    }\n-\n-    res.json(users);\n-  } catch (error) {\n-    console.error('Error searching users:', error.message);\n-    res.status(500).json({ error: 'An error occurred while searching users' });\n-  }\n-};\n-\n-// Update user profile description\n-exports.updateDescription = async (req, res) => {\n-  try {\n-    const { description } = req.body;\n-    const userId = req.user.id; // User ID is extracted from auth middleware\n-\n-    // Find the user by ID\n-    const user = await User.findById(userId);\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    // Update the description\n-    user.description = description;\n-    await user.save();\n-\n-    res.json({ message: 'Description updated successfully', description: user.description });\n-  } catch (error) {\n-    console.error('Error updating description:', error.message);\n-    res.status(500).json({ error: 'An error occurred while updating the description' });\n-  }\n-};\n-\n-// Get user details and posts\n-exports.getUserDetails = async (req, res) => {\n-  try {\n-    const userId = req.params.id;\n-\n-    // Find the user by ID\n-    const user = await User.findById(userId).select('username createdAt description');\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    // Find the posts made by the user\n-    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n-\n-    res.json({ user, posts });\n-  } catch (error) {\n-    console.error('Error fetching user details:', error.message);\n-    res.status(500).json({ error: 'An error occurred while fetching user details' });\n-  }\n-};\n"
                },
                {
                    "date": 1733539523305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+const User = require('../models/User');\n+const Post = require('../models/Post'); \n+const jwt = require('jsonwebtoken');\n+const bcrypt = require('bcrypt');\n+\n+// Register a new user and log them in\n+exports.register = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    // Validate input\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    // Check if the username already exists\n+    const existingUser = await User.findOne({ username });\n+    if (existingUser) {\n+      return res.status(409).json({ error: 'Username already exists' });\n+    }\n+\n+    // Hash the password\n+    const hashedPassword = await bcrypt.hash(password, 10);\n+\n+    // Create and save the user\n+    const user = new User({ username, password: hashedPassword });\n+    await user.save();\n+\n+    // Generate a JWT token\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+\n+    // Set the token as an HTTP-only cookie\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(201)\n+       .json({ message: 'User registered and logged in successfully' });\n+  } catch (error) {\n+    console.error('Error during registration:', error.message);\n+    res.status(500).json({ error: 'An error occurred while registering the user' });\n+  }\n+};\n+\n+// Log in a user\n+exports.login = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    console.log('Request Body:', req.body); // Debug input\n+    const user = await User.findOne({ username });\n+    console.log('Found User:', user); // Debug user from DB\n+\n+    if (!user) {\n+      return res.status(404).json({ error: 'Invalid username or password' });\n+    }\n+\n+    const isMatch = await bcrypt.compare(password, user.password);\n+    console.log('Password Match:', isMatch); // Debug password comparison\n+\n+    if (!isMatch) {\n+      return res.status(401).json({ error: 'Invalid username or password' });\n+    }\n+\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(200)\n+       .json({ message: 'Login successful' });\n+  } catch (error) {\n+    console.error('Error during login:', error.message);\n+    res.status(500).json({ error: 'An error occurred while logging in' });\n+  }\n+};\n+\n+const isMatch = await bcrypt.compare(password, user.password);\n+console.log('Plain Password:', password); // Log plain password\n+console.log('Hashed Password:', user.password); // Log hashed password\n+console.log('Password Match:', isMatch); // Log comparison result\n+\n+\n+// Search for users by username\n+exports.searchUsers = async (req, res) => {\n+  try {\n+    const query = req.query.q;\n+\n+    // Validate input\n+    if (!query) {\n+      return res.status(400).json({ error: 'Search query is required' });\n+    }\n+\n+    // Perform a case-insensitive, partial search on usernames\n+    const users = await User.find({\n+      username: { $regex: query, $options: 'i' },\n+    }).select('username createdAt'); // Return only username and createdAt fields\n+\n+    if (users.length === 0) {\n+      return res.status(404).json({ message: 'No users found' });\n+    }\n+\n+    res.json(users);\n+  } catch (error) {\n+    console.error('Error searching users:', error.message);\n+    res.status(500).json({ error: 'An error occurred while searching users' });\n+  }\n+};\n+\n+// Update user profile description\n+exports.updateDescription = async (req, res) => {\n+  try {\n+    const { description } = req.body;\n+    const userId = req.user.id; // User ID is extracted from auth middleware\n+\n+    // Find the user by ID\n+    const user = await User.findById(userId);\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    // Update the description\n+    user.description = description;\n+    await user.save();\n+\n+    res.json({ message: 'Description updated successfully', description: user.description });\n+  } catch (error) {\n+    console.error('Error updating description:', error.message);\n+    res.status(500).json({ error: 'An error occurred while updating the description' });\n+  }\n+};\n+\n+// Get user details and posts\n+exports.getUserDetails = async (req, res) => {\n+  try {\n+    const userId = req.params.id;\n+\n+    // Find the user by ID\n+    const user = await User.findById(userId).select('username createdAt description');\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    // Find the posts made by the user\n+    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n+\n+    res.json({ user, posts });\n+  } catch (error) {\n+    console.error('Error fetching user details:', error.message);\n+    res.status(500).json({ error: 'An error occurred while fetching user details' });\n+  }\n+};\n"
                },
                {
                    "date": 1733539573128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,145 +143,4 @@\n     console.error('Error fetching user details:', error.message);\n     res.status(500).json({ error: 'An error occurred while fetching user details' });\n   }\n };\n-const User = require('../models/User');\n-const Post = require('../models/Post'); \n-const jwt = require('jsonwebtoken');\n-const bcrypt = require('bcrypt');\n-\n-// Register a new user and log them in\n-exports.register = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    // Validate input\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n-    }\n-\n-    // Check if the username already exists\n-    const existingUser = await User.findOne({ username });\n-    if (existingUser) {\n-      return res.status(409).json({ error: 'Username already exists' });\n-    }\n-\n-    // Hash the password\n-    const hashedPassword = await bcrypt.hash(password, 10);\n-\n-    // Create and save the user\n-    const user = new User({ username, password: hashedPassword });\n-    await user.save();\n-\n-    // Generate a JWT token\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-\n-    // Set the token as an HTTP-only cookie\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(201)\n-       .json({ message: 'User registered and logged in successfully' });\n-  } catch (error) {\n-    console.error('Error during registration:', error.message);\n-    res.status(500).json({ error: 'An error occurred while registering the user' });\n-  }\n-};\n-\n-// Log in a user\n-exports.login = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    console.log('Request Body:', req.body); // Debug input\n-    const user = await User.findOne({ username });\n-    console.log('Found User:', user); // Debug user from DB\n-\n-    if (!user) {\n-      return res.status(404).json({ error: 'Invalid username or password' });\n-    }\n-\n-    const isMatch = await bcrypt.compare(password, user.password);\n-    console.log('Password Match:', isMatch); // Debug password comparison\n-\n-    if (!isMatch) {\n-      return res.status(401).json({ error: 'Invalid username or password' });\n-    }\n-\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(200)\n-       .json({ message: 'Login successful' });\n-  } catch (error) {\n-    console.error('Error during login:', error.message);\n-    res.status(500).json({ error: 'An error occurred while logging in' });\n-  }\n-};\n-\n-\n-// Search for users by username\n-exports.searchUsers = async (req, res) => {\n-  try {\n-    const query = req.query.q;\n-\n-    // Validate input\n-    if (!query) {\n-      return res.status(400).json({ error: 'Search query is required' });\n-    }\n-\n-    // Perform a case-insensitive, partial search on usernames\n-    const users = await User.find({\n-      username: { $regex: query, $options: 'i' },\n-    }).select('username createdAt'); // Return only username and createdAt fields\n-\n-    if (users.length === 0) {\n-      return res.status(404).json({ message: 'No users found' });\n-    }\n-\n-    res.json(users);\n-  } catch (error) {\n-    console.error('Error searching users:', error.message);\n-    res.status(500).json({ error: 'An error occurred while searching users' });\n-  }\n-};\n-\n-// Update user profile description\n-exports.updateDescription = async (req, res) => {\n-  try {\n-    const { description } = req.body;\n-    const userId = req.user.id; // User ID is extracted from auth middleware\n-\n-    // Find the user by ID\n-    const user = await User.findById(userId);\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    // Update the description\n-    user.description = description;\n-    await user.save();\n-\n-    res.json({ message: 'Description updated successfully', description: user.description });\n-  } catch (error) {\n-    console.error('Error updating description:', error.message);\n-    res.status(500).json({ error: 'An error occurred while updating the description' });\n-  }\n-};\n-\n-// Get user details and posts\n-exports.getUserDetails = async (req, res) => {\n-  try {\n-    const userId = req.params.id;\n-\n-    // Find the user by ID\n-    const user = await User.findById(userId).select('username createdAt description');\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    // Find the posts made by the user\n-    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n-\n-    res.json({ user, posts });\n-  } catch (error) {\n-    console.error('Error fetching user details:', error.message);\n-    res.status(500).json({ error: 'An error occurred while fetching user details' });\n-  }\n-};\n"
                },
                {
                    "date": 1733539830023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,28 @@\n const User = require('../models/User');\n-const Post = require('../models/Post'); \n+const Post = require('../models/Post');\n const jwt = require('jsonwebtoken');\n const bcrypt = require('bcrypt');\n \n // Register a new user and log them in\n exports.register = async (req, res) => {\n   try {\n     const { username, password } = req.body;\n \n-    // Validate input\n     if (!username || !password) {\n       return res.status(400).json({ error: 'Username and password are required' });\n     }\n \n-    // Check if the username already exists\n     const existingUser = await User.findOne({ username });\n     if (existingUser) {\n       return res.status(409).json({ error: 'Username already exists' });\n     }\n \n-    // Hash the password\n     const hashedPassword = await bcrypt.hash(password, 10);\n-\n-    // Create and save the user\n     const user = new User({ username, password: hashedPassword });\n     await user.save();\n \n-    // Generate a JWT token\n     const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-\n-    // Set the token as an HTTP-only cookie\n     res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n        .status(201)\n        .json({ message: 'User registered and logged in successfully' });\n   } catch (error) {\n@@ -43,19 +35,18 @@\n exports.login = async (req, res) => {\n   try {\n     const { username, password } = req.body;\n \n-    console.log('Request Body:', req.body); // Debug input\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n     const user = await User.findOne({ username });\n-    console.log('Found User:', user); // Debug user from DB\n-\n     if (!user) {\n       return res.status(404).json({ error: 'Invalid username or password' });\n     }\n \n     const isMatch = await bcrypt.compare(password, user.password);\n-    console.log('Password Match:', isMatch); // Debug password comparison\n-\n     if (!isMatch) {\n       return res.status(401).json({ error: 'Invalid username or password' });\n     }\n \n@@ -68,28 +59,20 @@\n     res.status(500).json({ error: 'An error occurred while logging in' });\n   }\n };\n \n-const isMatch = await bcrypt.compare(password, user.password);\n-console.log('Plain Password:', password); // Log plain password\n-console.log('Hashed Password:', user.password); // Log hashed password\n-console.log('Password Match:', isMatch); // Log comparison result\n-\n-\n // Search for users by username\n exports.searchUsers = async (req, res) => {\n   try {\n     const query = req.query.q;\n \n-    // Validate input\n     if (!query) {\n       return res.status(400).json({ error: 'Search query is required' });\n     }\n \n-    // Perform a case-insensitive, partial search on usernames\n     const users = await User.find({\n       username: { $regex: query, $options: 'i' },\n-    }).select('username createdAt'); // Return only username and createdAt fields\n+    }).select('username createdAt');\n \n     if (users.length === 0) {\n       return res.status(404).json({ message: 'No users found' });\n     }\n@@ -104,17 +87,15 @@\n // Update user profile description\n exports.updateDescription = async (req, res) => {\n   try {\n     const { description } = req.body;\n-    const userId = req.user.id; // User ID is extracted from auth middleware\n+    const userId = req.user.id;\n \n-    // Find the user by ID\n     const user = await User.findById(userId);\n     if (!user) {\n       return res.status(404).json({ error: 'User not found' });\n     }\n \n-    // Update the description\n     user.description = description;\n     await user.save();\n \n     res.json({ message: 'Description updated successfully', description: user.description });\n@@ -128,19 +109,24 @@\n exports.getUserDetails = async (req, res) => {\n   try {\n     const userId = req.params.id;\n \n-    // Find the user by ID\n     const user = await User.findById(userId).select('username createdAt description');\n     if (!user) {\n       return res.status(404).json({ error: 'User not found' });\n     }\n \n-    // Find the posts made by the user\n     const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n \n     res.json({ user, posts });\n   } catch (error) {\n     console.error('Error fetching user details:', error.message);\n     res.status(500).json({ error: 'An error occurred while fetching user details' });\n   }\n };\n+\n+// Logout a user\n+exports.logout = (req, res) => {\n+  res.clearCookie('token')\n+     .status(200)\n+     .json({ message: 'Logged out successfully' });\n+};\n"
                },
                {
                    "date": 1733539849583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+const User = require('../models/User');\n+const Post = require('../models/Post');\n+const jwt = require('jsonwebtoken');\n+const bcrypt = require('bcrypt');\n+\n+// Register a new user and log them in\n+exports.register = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    const existingUser = await User.findOne({ username });\n+    if (existingUser) {\n+      return res.status(409).json({ error: 'Username already exists' });\n+    }\n+\n+    const hashedPassword = await bcrypt.hash(password, 10);\n+    const user = new User({ username, password: hashedPassword });\n+    await user.save();\n+\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(201)\n+       .json({ message: 'User registered and logged in successfully' });\n+  } catch (error) {\n+    console.error('Error during registration:', error.message);\n+    res.status(500).json({ error: 'An error occurred while registering the user' });\n+  }\n+};\n+\n+// Log in a user\n+exports.login = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    const user = await User.findOne({ username });\n+    if (!user) {\n+      return res.status(404).json({ error: 'Invalid username or password' });\n+    }\n+\n+    const isMatch = await bcrypt.compare(password, user.password);\n+    if (!isMatch) {\n+      return res.status(401).json({ error: 'Invalid username or password' });\n+    }\n+\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(200)\n+       .json({ message: 'Login successful' });\n+  } catch (error) {\n+    console.error('Error during login:', error.message);\n+    res.status(500).json({ error: 'An error occurred while logging in' });\n+  }\n+};\n+\n+// Search for users by username\n+exports.searchUsers = async (req, res) => {\n+  try {\n+    const query = req.query.q;\n+\n+    if (!query) {\n+      return res.status(400).json({ error: 'Search query is required' });\n+    }\n+\n+    const users = await User.find({\n+      username: { $regex: query, $options: 'i' },\n+    }).select('username createdAt');\n+\n+    if (users.length === 0) {\n+      return res.status(404).json({ message: 'No users found' });\n+    }\n+\n+    res.json(users);\n+  } catch (error) {\n+    console.error('Error searching users:', error.message);\n+    res.status(500).json({ error: 'An error occurred while searching users' });\n+  }\n+};\n+\n+// Update user profile description\n+exports.updateDescription = async (req, res) => {\n+  try {\n+    const { description } = req.body;\n+    const userId = req.user.id;\n+\n+    const user = await User.findById(userId);\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    user.description = description;\n+    await user.save();\n+\n+    res.json({ message: 'Description updated successfully', description: user.description });\n+  } catch (error) {\n+    console.error('Error updating description:', error.message);\n+    res.status(500).json({ error: 'An error occurred while updating the description' });\n+  }\n+};\n+\n+// Get user details and posts\n+exports.getUserDetails = async (req, res) => {\n+  try {\n+    const userId = req.params.id;\n+\n+    const user = await User.findById(userId).select('username createdAt description');\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n+\n+    res.json({ user, posts });\n+  } catch (error) {\n+    console.error('Error fetching user details:', error.message);\n+    res.status(500).json({ error: 'An error occurred while fetching user details' });\n+  }\n+};\n+\n+// Logout a user\n+exports.logout = (req, res) => {\n+  res.clearCookie('token')\n+     .status(200)\n+     .json({ message: 'Logged out successfully' });\n+};\n"
                },
                {
                    "date": 1733539884692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,136 +129,4 @@\n   res.clearCookie('token')\n      .status(200)\n      .json({ message: 'Logged out successfully' });\n };\n-const User = require('../models/User');\n-const Post = require('../models/Post');\n-const jwt = require('jsonwebtoken');\n-const bcrypt = require('bcrypt');\n-\n-// Register a new user and log them in\n-exports.register = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n-    }\n-\n-    const existingUser = await User.findOne({ username });\n-    if (existingUser) {\n-      return res.status(409).json({ error: 'Username already exists' });\n-    }\n-\n-    const hashedPassword = await bcrypt.hash(password, 10);\n-    const user = new User({ username, password: hashedPassword });\n-    await user.save();\n-\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(201)\n-       .json({ message: 'User registered and logged in successfully' });\n-  } catch (error) {\n-    console.error('Error during registration:', error.message);\n-    res.status(500).json({ error: 'An error occurred while registering the user' });\n-  }\n-};\n-\n-// Log in a user\n-exports.login = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n-    }\n-\n-    const user = await User.findOne({ username });\n-    if (!user) {\n-      return res.status(404).json({ error: 'Invalid username or password' });\n-    }\n-\n-    const isMatch = await bcrypt.compare(password, user.password);\n-    if (!isMatch) {\n-      return res.status(401).json({ error: 'Invalid username or password' });\n-    }\n-\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(200)\n-       .json({ message: 'Login successful' });\n-  } catch (error) {\n-    console.error('Error during login:', error.message);\n-    res.status(500).json({ error: 'An error occurred while logging in' });\n-  }\n-};\n-\n-// Search for users by username\n-exports.searchUsers = async (req, res) => {\n-  try {\n-    const query = req.query.q;\n-\n-    if (!query) {\n-      return res.status(400).json({ error: 'Search query is required' });\n-    }\n-\n-    const users = await User.find({\n-      username: { $regex: query, $options: 'i' },\n-    }).select('username createdAt');\n-\n-    if (users.length === 0) {\n-      return res.status(404).json({ message: 'No users found' });\n-    }\n-\n-    res.json(users);\n-  } catch (error) {\n-    console.error('Error searching users:', error.message);\n-    res.status(500).json({ error: 'An error occurred while searching users' });\n-  }\n-};\n-\n-// Update user profile description\n-exports.updateDescription = async (req, res) => {\n-  try {\n-    const { description } = req.body;\n-    const userId = req.user.id;\n-\n-    const user = await User.findById(userId);\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    user.description = description;\n-    await user.save();\n-\n-    res.json({ message: 'Description updated successfully', description: user.description });\n-  } catch (error) {\n-    console.error('Error updating description:', error.message);\n-    res.status(500).json({ error: 'An error occurred while updating the description' });\n-  }\n-};\n-\n-// Get user details and posts\n-exports.getUserDetails = async (req, res) => {\n-  try {\n-    const userId = req.params.id;\n-\n-    const user = await User.findById(userId).select('username createdAt description');\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n-\n-    res.json({ user, posts });\n-  } catch (error) {\n-    console.error('Error fetching user details:', error.message);\n-    res.status(500).json({ error: 'An error occurred while fetching user details' });\n-  }\n-};\n-\n-// Logout a user\n-exports.logout = (req, res) => {\n-  res.clearCookie('token')\n-     .status(200)\n-     .json({ message: 'Logged out successfully' });\n-};\n"
                },
                {
                    "date": 1733539934367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+const User = require('../models/User');\n+const Post = require('../models/Post');\n+const jwt = require('jsonwebtoken');\n+const bcrypt = require('bcrypt');\n+\n+// Register a new user and log them in\n+exports.register = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    const existingUser = await User.findOne({ username });\n+    if (existingUser) {\n+      return res.status(409).json({ error: 'Username already exists' });\n+    }\n+\n+    const hashedPassword = await bcrypt.hash(password, 10);\n+    const user = new User({ username, password: hashedPassword });\n+    await user.save();\n+\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(201)\n+       .json({ message: 'User registered and logged in successfully' });\n+  } catch (error) {\n+    console.error('Error during registration:', error.message);\n+    res.status(500).json({ error: 'An error occurred while registering the user' });\n+  }\n+};\n+\n+// Log in a user\n+exports.login = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    const user = await User.findOne({ username });\n+    if (!user) {\n+      return res.status(404).json({ error: 'Invalid username or password' });\n+    }\n+\n+    const isMatch = await bcrypt.compare(password, user.password);\n+    if (!isMatch) {\n+      return res.status(401).json({ error: 'Invalid username or password' });\n+    }\n+\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(200)\n+       .json({ message: 'Login successful' });\n+  } catch (error) {\n+    console.error('Error during login:', error.message);\n+    res.status(500).json({ error: 'An error occurred while logging in' });\n+  }\n+};\n+\n+// Search for users by username\n+exports.searchUsers = async (req, res) => {\n+  try {\n+    const query = req.query.q;\n+\n+    if (!query) {\n+      return res.status(400).json({ error: 'Search query is required' });\n+    }\n+\n+    const users = await User.find({\n+      username: { $regex: query, $options: 'i' },\n+    }).select('username createdAt');\n+\n+    if (users.length === 0) {\n+      return res.status(404).json({ message: 'No users found' });\n+    }\n+\n+    res.json(users);\n+  } catch (error) {\n+    console.error('Error searching users:', error.message);\n+    res.status(500).json({ error: 'An error occurred while searching users' });\n+  }\n+};\n+\n+// Update user profile description\n+exports.updateDescription = async (req, res) => {\n+  try {\n+    const { description } = req.body;\n+    const userId = req.user.id;\n+\n+    const user = await User.findById(userId);\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    user.description = description;\n+    await user.save();\n+\n+    res.json({ message: 'Description updated successfully', description: user.description });\n+  } catch (error) {\n+    console.error('Error updating description:', error.message);\n+    res.status(500).json({ error: 'An error occurred while updating the description' });\n+  }\n+};\n+\n+// Get user details and posts\n+exports.getUserDetails = async (req, res) => {\n+  try {\n+    const userId = req.params.id;\n+\n+    const user = await User.findById(userId).select('username createdAt description');\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n+\n+    res.json({ user, posts });\n+  } catch (error) {\n+    console.error('Error fetching user details:', error.message);\n+    res.status(500).json({ error: 'An error occurred while fetching user details' });\n+  }\n+};\n+\n+// Logout a user\n+exports.logout = (req, res) => {\n+  res.clearCookie('token')\n+     .status(200)\n+     .json({ message: 'Logged out successfully' });\n+};\n"
                },
                {
                    "date": 1733540175741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,136 +129,4 @@\n   res.clearCookie('token')\n      .status(200)\n      .json({ message: 'Logged out successfully' });\n };\n-const User = require('../models/User');\n-const Post = require('../models/Post');\n-const jwt = require('jsonwebtoken');\n-const bcrypt = require('bcrypt');\n-\n-// Register a new user and log them in\n-exports.register = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n-    }\n-\n-    const existingUser = await User.findOne({ username });\n-    if (existingUser) {\n-      return res.status(409).json({ error: 'Username already exists' });\n-    }\n-\n-    const hashedPassword = await bcrypt.hash(password, 10);\n-    const user = new User({ username, password: hashedPassword });\n-    await user.save();\n-\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(201)\n-       .json({ message: 'User registered and logged in successfully' });\n-  } catch (error) {\n-    console.error('Error during registration:', error.message);\n-    res.status(500).json({ error: 'An error occurred while registering the user' });\n-  }\n-};\n-\n-// Log in a user\n-exports.login = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n-    }\n-\n-    const user = await User.findOne({ username });\n-    if (!user) {\n-      return res.status(404).json({ error: 'Invalid username or password' });\n-    }\n-\n-    const isMatch = await bcrypt.compare(password, user.password);\n-    if (!isMatch) {\n-      return res.status(401).json({ error: 'Invalid username or password' });\n-    }\n-\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(200)\n-       .json({ message: 'Login successful' });\n-  } catch (error) {\n-    console.error('Error during login:', error.message);\n-    res.status(500).json({ error: 'An error occurred while logging in' });\n-  }\n-};\n-\n-// Search for users by username\n-exports.searchUsers = async (req, res) => {\n-  try {\n-    const query = req.query.q;\n-\n-    if (!query) {\n-      return res.status(400).json({ error: 'Search query is required' });\n-    }\n-\n-    const users = await User.find({\n-      username: { $regex: query, $options: 'i' },\n-    }).select('username createdAt');\n-\n-    if (users.length === 0) {\n-      return res.status(404).json({ message: 'No users found' });\n-    }\n-\n-    res.json(users);\n-  } catch (error) {\n-    console.error('Error searching users:', error.message);\n-    res.status(500).json({ error: 'An error occurred while searching users' });\n-  }\n-};\n-\n-// Update user profile description\n-exports.updateDescription = async (req, res) => {\n-  try {\n-    const { description } = req.body;\n-    const userId = req.user.id;\n-\n-    const user = await User.findById(userId);\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    user.description = description;\n-    await user.save();\n-\n-    res.json({ message: 'Description updated successfully', description: user.description });\n-  } catch (error) {\n-    console.error('Error updating description:', error.message);\n-    res.status(500).json({ error: 'An error occurred while updating the description' });\n-  }\n-};\n-\n-// Get user details and posts\n-exports.getUserDetails = async (req, res) => {\n-  try {\n-    const userId = req.params.id;\n-\n-    const user = await User.findById(userId).select('username createdAt description');\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n-\n-    res.json({ user, posts });\n-  } catch (error) {\n-    console.error('Error fetching user details:', error.message);\n-    res.status(500).json({ error: 'An error occurred while fetching user details' });\n-  }\n-};\n-\n-// Logout a user\n-exports.logout = (req, res) => {\n-  res.clearCookie('token')\n-     .status(200)\n-     .json({ message: 'Logged out successfully' });\n-};\n"
                },
                {
                    "date": 1733540869521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,9 @@\n     if (existingUser) {\n       return res.status(409).json({ error: 'Username already exists' });\n     }\n \n-    const hashedPassword = await bcrypt.hash(password, 10);\n-    const user = new User({ username, password: hashedPassword });\n+    const user = new User({ username, password: password });\n     await user.save();\n \n     const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n     res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n"
                },
                {
                    "date": 1733540931441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     if (!user) {\n       return res.status(404).json({ error: 'Invalid username or password' });\n     }\n \n-    const isMatch = await bcrypt.compare(password, user.password);\n+    const isMatch = password == user.password;\n     if (!isMatch) {\n       return res.status(401).json({ error: 'Invalid username or password' });\n     }\n \n"
                },
                {
                    "date": 1733540963697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n const User = require('../models/User');\n const Post = require('../models/Post');\n const jwt = require('jsonwebtoken');\n-const bcrypt = require('bcrypt');\n \n // Register a new user and log them in\n exports.register = async (req, res) => {\n   try {\n"
                },
                {
                    "date": 1733541276687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+const User = require('../models/User');\n+const Post = require('../models/Post');\n+const jwt = require('jsonwebtoken');\n+\n+// Register a new user and log them in\n+exports.register = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    const existingUser = await User.findOne({ username });\n+    if (existingUser) {\n+      return res.status(409).json({ error: 'Username already exists' });\n+    }\n+\n+    const user = new User({ username, password: password });\n+    await user.save();\n+\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(201)\n+       .json({ message: 'User registered and logged in successfully' });\n+  } catch (error) {\n+    console.error('Error during registration:', error.message);\n+    res.status(500).json({ error: 'An error occurred while registering the user' });\n+  }\n+};\n+\n+// Log in a user\n+exports.login = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    const user = await User.findOne({ username });\n+    if (!user) {\n+      return res.status(404).json({ error: 'Invalid username or password' });\n+    }\n+\n+    const isMatch = password == user.password;\n+    if (!isMatch) {\n+      return res.status(401).json({ error: 'Invalid username or password' });\n+    }\n+\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(200)\n+       .json({ message: 'Login successful' });\n+  } catch (error) {\n+    console.error('Error during login:', error.message);\n+    res.status(500).json({ error: 'An error occurred while logging in' });\n+  }\n+};\n+\n+// Search for users by username\n+exports.searchUsers = async (req, res) => {\n+  try {\n+    const query = req.query.q;\n+\n+    if (!query) {\n+      return res.status(400).json({ error: 'Search query is required' });\n+    }\n+\n+    const users = await User.find({\n+      username: { $regex: query, $options: 'i' },\n+    }).select('username createdAt');\n+\n+    if (users.length === 0) {\n+      return res.status(404).json({ message: 'No users found' });\n+    }\n+\n+    res.json(users);\n+  } catch (error) {\n+    console.error('Error searching users:', error.message);\n+    res.status(500).json({ error: 'An error occurred while searching users' });\n+  }\n+};\n+\n+// Update user profile description\n+exports.updateDescription = async (req, res) => {\n+  try {\n+    const { description } = req.body;\n+    const userId = req.user.id;\n+\n+    const user = await User.findById(userId);\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    user.description = description;\n+    await user.save();\n+\n+    res.json({ message: 'Description updated successfully', description: user.description });\n+  } catch (error) {\n+    console.error('Error updating description:', error.message);\n+    res.status(500).json({ error: 'An error occurred while updating the description' });\n+  }\n+};\n+\n+// Get user details and posts\n+exports.getUserDetails = async (req, res) => {\n+  try {\n+    const userId = req.params.id;\n+\n+    const user = await User.findById(userId).select('username createdAt description');\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n+\n+    res.json({ user, posts });\n+  } catch (error) {\n+    console.error('Error fetching user details:', error.message);\n+    res.status(500).json({ error: 'An error occurred while fetching user details' });\n+  }\n+};\n+\n+// Logout a user\n+exports.logout = (req, res) => {\n+  res.clearCookie('token')\n+     .status(200)\n+     .json({ message: 'Logged out successfully' });\n+};\n"
                },
                {
                    "date": 1733541281713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,134 +127,4 @@\n   res.clearCookie('token')\n      .status(200)\n      .json({ message: 'Logged out successfully' });\n };\n-const User = require('../models/User');\n-const Post = require('../models/Post');\n-const jwt = require('jsonwebtoken');\n-\n-// Register a new user and log them in\n-exports.register = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n-    }\n-\n-    const existingUser = await User.findOne({ username });\n-    if (existingUser) {\n-      return res.status(409).json({ error: 'Username already exists' });\n-    }\n-\n-    const user = new User({ username, password: password });\n-    await user.save();\n-\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(201)\n-       .json({ message: 'User registered and logged in successfully' });\n-  } catch (error) {\n-    console.error('Error during registration:', error.message);\n-    res.status(500).json({ error: 'An error occurred while registering the user' });\n-  }\n-};\n-\n-// Log in a user\n-exports.login = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n-    }\n-\n-    const user = await User.findOne({ username });\n-    if (!user) {\n-      return res.status(404).json({ error: 'Invalid username or password' });\n-    }\n-\n-    const isMatch = password == user.password;\n-    if (!isMatch) {\n-      return res.status(401).json({ error: 'Invalid username or password' });\n-    }\n-\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(200)\n-       .json({ message: 'Login successful' });\n-  } catch (error) {\n-    console.error('Error during login:', error.message);\n-    res.status(500).json({ error: 'An error occurred while logging in' });\n-  }\n-};\n-\n-// Search for users by username\n-exports.searchUsers = async (req, res) => {\n-  try {\n-    const query = req.query.q;\n-\n-    if (!query) {\n-      return res.status(400).json({ error: 'Search query is required' });\n-    }\n-\n-    const users = await User.find({\n-      username: { $regex: query, $options: 'i' },\n-    }).select('username createdAt');\n-\n-    if (users.length === 0) {\n-      return res.status(404).json({ message: 'No users found' });\n-    }\n-\n-    res.json(users);\n-  } catch (error) {\n-    console.error('Error searching users:', error.message);\n-    res.status(500).json({ error: 'An error occurred while searching users' });\n-  }\n-};\n-\n-// Update user profile description\n-exports.updateDescription = async (req, res) => {\n-  try {\n-    const { description } = req.body;\n-    const userId = req.user.id;\n-\n-    const user = await User.findById(userId);\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    user.description = description;\n-    await user.save();\n-\n-    res.json({ message: 'Description updated successfully', description: user.description });\n-  } catch (error) {\n-    console.error('Error updating description:', error.message);\n-    res.status(500).json({ error: 'An error occurred while updating the description' });\n-  }\n-};\n-\n-// Get user details and posts\n-exports.getUserDetails = async (req, res) => {\n-  try {\n-    const userId = req.params.id;\n-\n-    const user = await User.findById(userId).select('username createdAt description');\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n-\n-    res.json({ user, posts });\n-  } catch (error) {\n-    console.error('Error fetching user details:', error.message);\n-    res.status(500).json({ error: 'An error occurred while fetching user details' });\n-  }\n-};\n-\n-// Logout a user\n-exports.logout = (req, res) => {\n-  res.clearCookie('token')\n-     .status(200)\n-     .json({ message: 'Logged out successfully' });\n-};\n"
                },
                {
                    "date": 1733541589044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     }\n \n     const user = await User.findOne({ username });\n     if (!user) {\n-      return res.status(404).json({ error: 'Invalid username or password' });\n+      return res.status(404).json({ error: 'Missing username or password' });\n     }\n \n     const isMatch = password == user.password;\n     if (!isMatch) {\n"
                },
                {
                    "date": 1733541646607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+const User = require('../models/User');\n+const Post = require('../models/Post');\n+const jwt = require('jsonwebtoken');\n+\n+// Register a new user and log them in\n+exports.register = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    const existingUser = await User.findOne({ username });\n+    if (existingUser) {\n+      return res.status(409).json({ error: 'Username already exists' });\n+    }\n+\n+    const user = new User({ username, password: password });\n+    await user.save();\n+\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(201)\n+       .json({ message: 'User registered and logged in successfully' });\n+  } catch (error) {\n+    console.error('Error during registration:', error.message);\n+    res.status(500).json({ error: 'An error occurred while registering the user' });\n+  }\n+};\n+\n+// Log in a user\n+exports.login = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    const user = await User.findOne({ username });\n+    console.error('User registration: ' + user.username + ' ' + user.password);\n+    if (!user) {\n+      return res.status(404).json({ error: 'Missing username or password' });\n+    }\n+\n+    const isMatch = password == user.password;\n+    if (!isMatch) {\n+      return res.status(401).json({ error: 'Invalid username or password' });\n+    }\n+\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(200)\n+       .json({ message: 'Login successful' });\n+  } catch (error) {\n+    console.error('Error during login:', error.message);\n+    res.status(500).json({ error: 'An error occurred while logging in' });\n+  }\n+};\n+\n+// Search for users by username\n+exports.searchUsers = async (req, res) => {\n+  try {\n+    const query = req.query.q;\n+\n+    if (!query) {\n+      return res.status(400).json({ error: 'Search query is required' });\n+    }\n+\n+    const users = await User.find({\n+      username: { $regex: query, $options: 'i' },\n+    }).select('username createdAt');\n+\n+    if (users.length === 0) {\n+      return res.status(404).json({ message: 'No users found' });\n+    }\n+\n+    res.json(users);\n+  } catch (error) {\n+    console.error('Error searching users:', error.message);\n+    res.status(500).json({ error: 'An error occurred while searching users' });\n+  }\n+};\n+\n+// Update user profile description\n+exports.updateDescription = async (req, res) => {\n+  try {\n+    const { description } = req.body;\n+    const userId = req.user.id;\n+\n+    const user = await User.findById(userId);\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    user.description = description;\n+    await user.save();\n+\n+    res.json({ message: 'Description updated successfully', description: user.description });\n+  } catch (error) {\n+    console.error('Error updating description:', error.message);\n+    res.status(500).json({ error: 'An error occurred while updating the description' });\n+  }\n+};\n+\n+// Get user details and posts\n+exports.getUserDetails = async (req, res) => {\n+  try {\n+    const userId = req.params.id;\n+\n+    const user = await User.findById(userId).select('username createdAt description');\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n+\n+    res.json({ user, posts });\n+  } catch (error) {\n+    console.error('Error fetching user details:', error.message);\n+    res.status(500).json({ error: 'An error occurred while fetching user details' });\n+  }\n+};\n+\n+// Logout a user\n+exports.logout = (req, res) => {\n+  res.clearCookie('token')\n+     .status(200)\n+     .json({ message: 'Logged out successfully' });\n+};\n"
                },
                {
                    "date": 1733541668915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+const User = require('../models/User');\n+const Post = require('../models/Post');\n+const jwt = require('jsonwebtoken');\n+\n+// Register a new user and log them in\n+exports.register = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    const existingUser = await User.findOne({ username });\n+    if (existingUser) {\n+      return res.status(409).json({ error: 'Username already exists' });\n+    }\n+\n+    const user = new User({ username, password: password });\n+    await user.save();\n+\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(201)\n+       .json({ message: 'User registered and logged in successfully' });\n+  } catch (error) {\n+    console.error('Error during registration:', error.message);\n+    res.status(500).json({ error: 'An error occurred while registering the user' });\n+  }\n+};\n+\n+// Log in a user\n+exports.login = async (req, res) => {\n+  try {\n+    const { username, password } = req.body;\n+\n+    if (!username || !password) {\n+      return res.status(400).json({ error: 'Username and password are required' });\n+    }\n+\n+    const user = await User.findOne({ username });\n+    console.error('User registration: ' + user.username + ' ' + user.password);\n+    if (!user) {\n+      return res.status(404).json({ error: 'Missing username or password' });\n+    }\n+\n+    const isMatch = password == user.password;\n+    console.error('User matching: ' + password + ' ' + user.password);\n+    if (!isMatch) {\n+      return res.status(401).json({ error: 'Invalid username or password' });\n+    }\n+\n+    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n+    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n+       .status(200)\n+       .json({ message: 'Login successful' });\n+  } catch (error) {\n+    console.error('Error during login:', error.message);\n+    res.status(500).json({ error: 'An error occurred while logging in' });\n+  }\n+};\n+\n+// Search for users by username\n+exports.searchUsers = async (req, res) => {\n+  try {\n+    const query = req.query.q;\n+\n+    if (!query) {\n+      return res.status(400).json({ error: 'Search query is required' });\n+    }\n+\n+    const users = await User.find({\n+      username: { $regex: query, $options: 'i' },\n+    }).select('username createdAt');\n+\n+    if (users.length === 0) {\n+      return res.status(404).json({ message: 'No users found' });\n+    }\n+\n+    res.json(users);\n+  } catch (error) {\n+    console.error('Error searching users:', error.message);\n+    res.status(500).json({ error: 'An error occurred while searching users' });\n+  }\n+};\n+\n+// Update user profile description\n+exports.updateDescription = async (req, res) => {\n+  try {\n+    const { description } = req.body;\n+    const userId = req.user.id;\n+\n+    const user = await User.findById(userId);\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    user.description = description;\n+    await user.save();\n+\n+    res.json({ message: 'Description updated successfully', description: user.description });\n+  } catch (error) {\n+    console.error('Error updating description:', error.message);\n+    res.status(500).json({ error: 'An error occurred while updating the description' });\n+  }\n+};\n+\n+// Get user details and posts\n+exports.getUserDetails = async (req, res) => {\n+  try {\n+    const userId = req.params.id;\n+\n+    const user = await User.findById(userId).select('username createdAt description');\n+    if (!user) {\n+      return res.status(404).json({ error: 'User not found' });\n+    }\n+\n+    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n+\n+    res.json({ user, posts });\n+  } catch (error) {\n+    console.error('Error fetching user details:', error.message);\n+    res.status(500).json({ error: 'An error occurred while fetching user details' });\n+  }\n+};\n+\n+// Logout a user\n+exports.logout = (req, res) => {\n+  res.clearCookie('token')\n+     .status(200)\n+     .json({ message: 'Logged out successfully' });\n+};\n"
                },
                {
                    "date": 1733541862544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n       return res.status(409).json({ error: 'Username already exists' });\n     }\n \n     const user = new User({ username, password: password });\n+    console.error('Saving: ' + username + ' ' + password);\n     await user.save();\n \n     const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n     res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n@@ -129,265 +130,4 @@\n   res.clearCookie('token')\n      .status(200)\n      .json({ message: 'Logged out successfully' });\n };\n-const User = require('../models/User');\n-const Post = require('../models/Post');\n-const jwt = require('jsonwebtoken');\n-\n-// Register a new user and log them in\n-exports.register = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n-    }\n-\n-    const existingUser = await User.findOne({ username });\n-    if (existingUser) {\n-      return res.status(409).json({ error: 'Username already exists' });\n-    }\n-\n-    const user = new User({ username, password: password });\n-    await user.save();\n-\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(201)\n-       .json({ message: 'User registered and logged in successfully' });\n-  } catch (error) {\n-    console.error('Error during registration:', error.message);\n-    res.status(500).json({ error: 'An error occurred while registering the user' });\n-  }\n-};\n-\n-// Log in a user\n-exports.login = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n-    }\n-\n-    const user = await User.findOne({ username });\n-    console.error('User registration: ' + user.username + ' ' + user.password);\n-    if (!user) {\n-      return res.status(404).json({ error: 'Missing username or password' });\n-    }\n-\n-    const isMatch = password == user.password;\n-    if (!isMatch) {\n-      return res.status(401).json({ error: 'Invalid username or password' });\n-    }\n-\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(200)\n-       .json({ message: 'Login successful' });\n-  } catch (error) {\n-    console.error('Error during login:', error.message);\n-    res.status(500).json({ error: 'An error occurred while logging in' });\n-  }\n-};\n-\n-// Search for users by username\n-exports.searchUsers = async (req, res) => {\n-  try {\n-    const query = req.query.q;\n-\n-    if (!query) {\n-      return res.status(400).json({ error: 'Search query is required' });\n-    }\n-\n-    const users = await User.find({\n-      username: { $regex: query, $options: 'i' },\n-    }).select('username createdAt');\n-\n-    if (users.length === 0) {\n-      return res.status(404).json({ message: 'No users found' });\n-    }\n-\n-    res.json(users);\n-  } catch (error) {\n-    console.error('Error searching users:', error.message);\n-    res.status(500).json({ error: 'An error occurred while searching users' });\n-  }\n-};\n-\n-// Update user profile description\n-exports.updateDescription = async (req, res) => {\n-  try {\n-    const { description } = req.body;\n-    const userId = req.user.id;\n-\n-    const user = await User.findById(userId);\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    user.description = description;\n-    await user.save();\n-\n-    res.json({ message: 'Description updated successfully', description: user.description });\n-  } catch (error) {\n-    console.error('Error updating description:', error.message);\n-    res.status(500).json({ error: 'An error occurred while updating the description' });\n-  }\n-};\n-\n-// Get user details and posts\n-exports.getUserDetails = async (req, res) => {\n-  try {\n-    const userId = req.params.id;\n-\n-    const user = await User.findById(userId).select('username createdAt description');\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n-\n-    res.json({ user, posts });\n-  } catch (error) {\n-    console.error('Error fetching user details:', error.message);\n-    res.status(500).json({ error: 'An error occurred while fetching user details' });\n-  }\n-};\n-\n-// Logout a user\n-exports.logout = (req, res) => {\n-  res.clearCookie('token')\n-     .status(200)\n-     .json({ message: 'Logged out successfully' });\n-};\n-const User = require('../models/User');\n-const Post = require('../models/Post');\n-const jwt = require('jsonwebtoken');\n-\n-// Register a new user and log them in\n-exports.register = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n-    }\n-\n-    const existingUser = await User.findOne({ username });\n-    if (existingUser) {\n-      return res.status(409).json({ error: 'Username already exists' });\n-    }\n-\n-    const user = new User({ username, password: password });\n-    await user.save();\n-\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(201)\n-       .json({ message: 'User registered and logged in successfully' });\n-  } catch (error) {\n-    console.error('Error during registration:', error.message);\n-    res.status(500).json({ error: 'An error occurred while registering the user' });\n-  }\n-};\n-\n-// Log in a user\n-exports.login = async (req, res) => {\n-  try {\n-    const { username, password } = req.body;\n-\n-    if (!username || !password) {\n-      return res.status(400).json({ error: 'Username and password are required' });\n-    }\n-\n-    const user = await User.findOne({ username });\n-    if (!user) {\n-      return res.status(404).json({ error: 'Missing username or password' });\n-    }\n-\n-    const isMatch = password == user.password;\n-    if (!isMatch) {\n-      return res.status(401).json({ error: 'Invalid username or password' });\n-    }\n-\n-    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n-    res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n-       .status(200)\n-       .json({ message: 'Login successful' });\n-  } catch (error) {\n-    console.error('Error during login:', error.message);\n-    res.status(500).json({ error: 'An error occurred while logging in' });\n-  }\n-};\n-\n-// Search for users by username\n-exports.searchUsers = async (req, res) => {\n-  try {\n-    const query = req.query.q;\n-\n-    if (!query) {\n-      return res.status(400).json({ error: 'Search query is required' });\n-    }\n-\n-    const users = await User.find({\n-      username: { $regex: query, $options: 'i' },\n-    }).select('username createdAt');\n-\n-    if (users.length === 0) {\n-      return res.status(404).json({ message: 'No users found' });\n-    }\n-\n-    res.json(users);\n-  } catch (error) {\n-    console.error('Error searching users:', error.message);\n-    res.status(500).json({ error: 'An error occurred while searching users' });\n-  }\n-};\n-\n-// Update user profile description\n-exports.updateDescription = async (req, res) => {\n-  try {\n-    const { description } = req.body;\n-    const userId = req.user.id;\n-\n-    const user = await User.findById(userId);\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    user.description = description;\n-    await user.save();\n-\n-    res.json({ message: 'Description updated successfully', description: user.description });\n-  } catch (error) {\n-    console.error('Error updating description:', error.message);\n-    res.status(500).json({ error: 'An error occurred while updating the description' });\n-  }\n-};\n-\n-// Get user details and posts\n-exports.getUserDetails = async (req, res) => {\n-  try {\n-    const userId = req.params.id;\n-\n-    const user = await User.findById(userId).select('username createdAt description');\n-    if (!user) {\n-      return res.status(404).json({ error: 'User not found' });\n-    }\n-\n-    const posts = await Post.find({ user: userId }).sort({ timestamp: -1 });\n-\n-    res.json({ user, posts });\n-  } catch (error) {\n-    console.error('Error fetching user details:', error.message);\n-    res.status(500).json({ error: 'An error occurred while fetching user details' });\n-  }\n-};\n-\n-// Logout a user\n-exports.logout = (req, res) => {\n-  res.clearCookie('token')\n-     .status(200)\n-     .json({ message: 'Logged out successfully' });\n-};\n"
                },
                {
                    "date": 1733542343854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,8 @@\n       return res.status(409).json({ error: 'Username already exists' });\n     }\n \n     const user = new User({ username, password: password });\n-    console.error('Saving: ' + username + ' ' + password);\n     await user.save();\n \n     const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n     res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n@@ -39,15 +38,13 @@\n       return res.status(400).json({ error: 'Username and password are required' });\n     }\n \n     const user = await User.findOne({ username });\n-    console.error('User registration: ' + user.username + ' ' + user.password);\n     if (!user) {\n       return res.status(404).json({ error: 'Missing username or password' });\n     }\n \n     const isMatch = password == user.password;\n-    console.error('User matching: ' + password + ' ' + user.password);\n     if (!isMatch) {\n       return res.status(401).json({ error: 'Invalid username or password' });\n     }\n \n"
                },
                {
                    "date": 1733543370384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,8 @@\n     res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n        .status(200)\n        .json({ message: 'Login successful' });\n   } catch (error) {\n-    console.error('Error during login:', error.message);\n     res.status(500).json({ error: 'An error occurred while logging in' });\n   }\n };\n \n@@ -76,9 +75,8 @@\n     }\n \n     res.json(users);\n   } catch (error) {\n-    console.error('Error searching users:', error.message);\n     res.status(500).json({ error: 'An error occurred while searching users' });\n   }\n };\n \n"
                },
                {
                    "date": 1733543885035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n     res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' })\n        .status(200)\n        .json({ message: 'Login successful' });\n   } catch (error) {\n+    console.error('Error during login:', error.message);\n     res.status(500).json({ error: 'An error occurred while logging in' });\n   }\n };\n \n@@ -75,8 +76,9 @@\n     }\n \n     res.json(users);\n   } catch (error) {\n+    console.error('Error searching users:', error.message);\n     res.status(500).json({ error: 'An error occurred while searching users' });\n   }\n };\n \n"
                }
            ],
            "date": 1733196338412,
            "name": "Commit-0",
            "content": "const User = require('../models/User');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\n\n/**\n * Register a new user.\n * @param {Object} req - Express request object containing user details in req.body.\n * @param {Object} res - Express response object.\n */\nexports.registerUser = async (req, res) => {\n  const { username, email, password } = req.body;\n  try {\n    // Hash the user's password before saving to the database\n    const hashedPassword = await bcrypt.hash(password, 10);\n    // Create a new user instance with the provided details\n    const newUser = new User({ username, email, password: hashedPassword });\n    // Save the user to the database\n    await newUser.save();\n    res.status(201).json({ message: 'User registered successfully' });\n  } catch (error) {\n    // Handle errors, such as duplicate entries or validation issues\n    res.status(400).json({ error: error.message });\n  }\n};\n\n/**\n * Authenticate a user and return a JWT token.\n * @param {Object} req - Express request object containing login details in req.body.\n * @param {Object} res - Express response object.\n */\nexports.loginUser = async (req, res) => {\n  const { email, password } = req.body;\n  try {\n    // Find the user by email\n    const user = await User.findOne({ email });\n    if (!user) return res.status(404).json({ error: 'User not found' });\n\n    // Compare the provided password with the hashed password in the database\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\n\n    // Generate a JWT token valid for 1 hour\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\n    res.json({ token });\n  } catch (error) {\n    // Handle errors during authentication\n    res.status(500).json({ error: error.message });\n  }\n};\n"
        }
    ]
}